---
export async function getStaticPaths() {
  const builderModel = import.meta.env.BUILDER_MODEL_NAME;
  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
  const { results: posts } = await fetch(
    `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams(
      {
        apiKey: builderAPIpublicKey,
        fields: ["data.url", "data.title", "data.description", "data.image"].join(","),
        cachebust: "true",
      }
    ).toString()}`
  )
    .then((res) => res.json())
    .catch();

   console.log(posts)

  return posts.map(({ data: { url, title, description, image  } }) => {
      return {
        params: { slug: url },
        props: { title, description, image },
      }
   })
  
}
const { slug } = Astro.params;
const { title, description, image } = Astro.props;

const builderModel = import.meta.env.BUILDER_MODEL_NAME;
const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;
const { data } = await fetch(
  `https://cdn.builder.io/api/v3/html/${builderModel}?apiKey=${builderAPIpublicKey}&url=${encodeURIComponent(`/${slug}`)}`
)
  .then((res) => res.json())
  .catch();

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		
		<title>{title}</title>
		<meta name="description" content={description} />

		<meta name='og:title' content={title} />
		<meta name='og:description' content={description} />
		{image && <meta name='og:image' content={image} />}

		<!-- Reset all browser styles -->
		<link rel="stylesheet" type="text/css" href="/reset.css" />
	</head>
	<body>
		<Fragment set:html={data?.html} />
	</body>
</html>
